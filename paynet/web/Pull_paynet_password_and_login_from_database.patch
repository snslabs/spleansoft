Index: src/uz/sportloto/paynet/model/PaynetCredentials.java
===================================================================
--- src/uz/sportloto/paynet/model/PaynetCredentials.java	Mon Apr 21 14:12:56 MSD 2008
+++ src/uz/sportloto/paynet/model/PaynetCredentials.java	Mon Apr 21 14:12:56 MSD 2008
@@ -0,0 +1,37 @@
+package uz.sportloto.paynet.model;
+
+/**
+ * this class stores paynet credentials (login, password, terminal id) to acces paynet
+ */
+public class PaynetCredentials {
+    private String paynetLogin;
+    private String paynetPwd;
+    private int terminalId;
+
+    public PaynetCredentials() {
+    }
+
+    public String getPaynetLogin() {
+        return paynetLogin;
+    }
+
+    public void setPaynetLogin(String paynetLogin) {
+        this.paynetLogin = paynetLogin;
+    }
+
+    public String getPaynetPwd() {
+        return paynetPwd;
+    }
+
+    public void setPaynetPwd(String paynetPwd) {
+        this.paynetPwd = paynetPwd;
+    }
+
+    public int getTerminalId() {
+        return terminalId;
+    }
+
+    public void setTerminalId(int terminalId) {
+        this.terminalId = terminalId;
+    }
+}
Index: src/uz/sportloto/paynet/dao/DAOFactory.java
===================================================================
--- src/uz/sportloto/paynet/dao/DAOFactory.java	(revision 290)
+++ src/uz/sportloto/paynet/dao/DAOFactory.java	Mon Apr 21 14:23:57 MSD 2008
@@ -2,6 +2,7 @@
 
 import uz.sportloto.paynet.dao.hibernate.ProvidersHibernateDAOImpl;
 import uz.sportloto.paynet.dao.hibernate.PaymentHibernateDAOImpl;
+import uz.sportloto.paynet.dao.hibernate.HibernateSecurityDAOImpl;
 
 public class DAOFactory {
     public static final int HIBERNATE = 1;
@@ -20,4 +21,11 @@
         }
         throw new IllegalArgumentException("DAO type "+mode+" not implemented yet!");
     }
+
+    public static SecurityDAO getSecurityDAO() {
+        switch(mode){
+            case HIBERNATE: return new HibernateSecurityDAOImpl();
-}
+        }
+        throw new IllegalArgumentException("DAO type "+mode+" not implemented yet!");
+    }
+}
Index: src/uz/sportloto/paynet/comm/PaynetCommunicationImpl.java
===================================================================
--- src/uz/sportloto/paynet/comm/PaynetCommunicationImpl.java	(revision 375)
+++ src/uz/sportloto/paynet/comm/PaynetCommunicationImpl.java	Mon Apr 21 16:01:39 MSD 2008
@@ -6,8 +6,10 @@
 import uz.sportloto.Configuration;
 import uz.sportloto.paynet.dao.DAOFactory;
 import uz.sportloto.paynet.dao.PaymentDAO;
+import uz.sportloto.paynet.dao.SecurityDAO;
 import uz.sportloto.paynet.model.PaynetRequest;
 import uz.sportloto.paynet.model.PaynetRequestDetail;
+import uz.sportloto.paynet.model.PaynetCredentials;
 
 import javax.net.ssl.*;
 import java.io.IOException;
@@ -21,6 +23,7 @@
 public class PaynetCommunicationImpl implements PaynetCommunication {
     char[] buf = new char[1024];
     private static final Log log = LogFactory.getLog(PaynetCommunicationImpl.class);
+    private SecurityDAO securityDao = DAOFactory.getSecurityDAO();
 
     /**
      * Запрос в пейнет
@@ -46,7 +49,7 @@
             while ((len = streamReader.read(buf)) != -1) {
                 sb.append(buf, 0, len);
             }
-            
+
             log.debug("PAYNET RESPONSE: " + sb.toString());
             // устанавливаем результат ответа
             paynetRequest.setResponse(sb.toString());
@@ -71,12 +74,29 @@
         }
     }
 
-    private String getQueryString(PaynetRequest paynetRequest) {
+    private String getQueryString(PaynetRequest paynetRequest) throws PaynetCommException {
         StringBuffer sb = new StringBuffer("?");
-        sb.append("USERNAME=").append(Configuration.getPaynetUsername()).append("&").
-                append("PASSWORD=").append(Configuration.getPaynetPassword()).append("&").
+        PaynetCredentials paynetCredentials = null;
+        try{
+            paynetCredentials = securityDao.getPaynetCredentialsByTerminalId(Integer.valueOf(paynetRequest.getTerminalId()));
+            if(paynetCredentials == null ){
+                log.error("No data found for terminal_id = " + paynetRequest.getTerminalId() + " (DAO return NULL)");
+                throw new PaynetCommException("Терминал PAYNET_ID = " + paynetRequest.getTerminalId()+ " не найден!");
+            }
+            sb.append("USERNAME=").append(paynetCredentials.getPaynetLogin()).append("&").
+                    append("PASSWORD=").append(paynetCredentials.getPaynetPwd()).append("&").
-                append("ACT=").append(paynetRequest.getActionCode()).append("&").
-                append("TERMINAL_ID=").append(paynetRequest.getTerminalId()).append("&");
+                    append("ACT=").append(paynetRequest.getActionCode()).append("&").
+                    append("TERMINAL_ID=").append(paynetRequest.getTerminalId()).append("&");
+        }
+        catch(HibernateException e){
+            log.error("Cannot obtain paynet credentials for terminal_id=" + paynetRequest.getTerminalId(), e);
+            throw new PaynetCommException("Cannot get paynet credentials for terminal_id = " + paynetRequest.getTerminalId(), e);
+        }
+// todo: remove at all or use switch to use old method of obtaining username and password for paynet transaction
+//        sb.append("USERNAME=").append(Configuration.getPaynetUsername()).append("&").
+//                append("PASSWORD=").append(Configuration.getPaynetPassword()).append("&").
+//                append("ACT=").append(paynetRequest.getActionCode()).append("&").
+//                append("TERMINAL_ID=").append(paynetRequest.getTerminalId()).append("&");
         switch(paynetRequest.getActionCode()){
             case 2:
                 sb.append("SERVICE_ID=").append(paynetRequest.getServiceId()).append("&");
Index: src/uz/sportloto/paynet/dao/hibernate/HibernateSecurityDAOImpl.java
===================================================================
--- src/uz/sportloto/paynet/dao/hibernate/HibernateSecurityDAOImpl.java	Mon Apr 21 14:22:30 MSD 2008
+++ src/uz/sportloto/paynet/dao/hibernate/HibernateSecurityDAOImpl.java	Mon Apr 21 14:22:30 MSD 2008
@@ -0,0 +1,18 @@
+package uz.sportloto.paynet.dao.hibernate;
+
+import uz.sportloto.paynet.dao.SecurityDAO;
+import uz.sportloto.paynet.model.PaynetCredentials;
+import net.sf.hibernate.HibernateException;
+import net.sf.hibernate.Session;
+
+public class HibernateSecurityDAOImpl extends BaseHibernateDAO implements SecurityDAO {
+    public PaynetCredentials getPaynetCredentialsByTerminalId(int terminalId) throws HibernateException {
+        final Session session = this.openSession();
+        try {
+            return (PaynetCredentials) session.get(PaynetCredentials.class, terminalId);
+        }
+        finally {
+            session.close();
+        }
+    }
+}
Index: src/uz/sportloto/paynet/PaynetIntegrationImpl.java
===================================================================
--- src/uz/sportloto/paynet/PaynetIntegrationImpl.java	(revision 374)
+++ src/uz/sportloto/paynet/PaynetIntegrationImpl.java	Mon Apr 21 15:57:47 MSD 2008
@@ -127,14 +127,17 @@
             // вызываем пейнет
             if(!duplicate){
                 //  если это не дублирование запроса, то обрабатываем
-                paynetComm.queryPaynet(paynetRequest);
                 try{
+                    paynetComm.queryPaynet(paynetRequest);
                     return transformPaynetResponse(paynetRequest);
                 }
                 catch(TransformException e){
                     return new CustomErrorTransformer(-9999, "Неизвестная ошибка при обработке ответа.").transform(paynetRequest);
                 }
+                catch(PaynetCommException e){
+                    return new CustomErrorTransformer(-9999, "Ошибка при соединения с пейнетом. " + e.getMessage()).transform(paynetRequest);
-            }
+                }
+            }
             else{
                 paynetRequest.setState('D'); // статус - дубликат
                 return new CustomErrorTransformer(-9000, "Дублирование запроса").transform(paynetRequest);
Index: src/uz/sportloto/paynet/dao/hibernate/resources/PaynetCredentials.hbm.xml
===================================================================
--- src/uz/sportloto/paynet/dao/hibernate/resources/PaynetCredentials.hbm.xml	Mon Apr 21 15:54:46 MSD 2008
+++ src/uz/sportloto/paynet/dao/hibernate/resources/PaynetCredentials.hbm.xml	Mon Apr 21 15:54:46 MSD 2008
@@ -0,0 +1,14 @@
+<?xml version="1.0"?>
+<!DOCTYPE hibernate-mapping PUBLIC
+   "-//Hibernate/Hibernate Mapping DTD//EN"
+   "http://hibernate.sourceforge.net/hibernate-mapping-2.0.dtd">
+
+<hibernate-mapping schema="LOTTO">
+	<class name="uz.sportloto.paynet.model.PaynetCredentials" table="TERMINALS" mutable="false">
+        <id column="PAYNET_ID" type="integer" name="terminalId">
+            <generator class="assigned" />
+        </id>
+        <property name="paynetLogin" column="PAYNET_LOGIN"/>
+        <property name="paynetPwd" column="PAYNET_PWD"/>
+    </class>
+</hibernate-mapping>
\ No newline at end of file
Index: src/uz/sportloto/paynet/dao/hibernate/resources/hibernate.cfg.xml
===================================================================
--- src/uz/sportloto/paynet/dao/hibernate/resources/hibernate.cfg.xml	(revision 309)
+++ src/uz/sportloto/paynet/dao/hibernate/resources/hibernate.cfg.xml	Mon Apr 21 14:17:47 MSD 2008
@@ -37,6 +37,7 @@
         <mapping resource="uz/sportloto/paynet/dao/hibernate/resources/PaynetRequest.hbm.xml"/>
         <mapping resource="uz/sportloto/paynet/dao/hibernate/resources/PaynetRequestDetail.hbm.xml"/>
         <mapping resource="uz/sportloto/paynet/dao/hibernate/resources/LookupQueries.hbm.xml"/>
+        <mapping resource="uz/sportloto/paynet/dao/hibernate/resources/PaynetCredentials.hbm.xml"/>
 
     </session-factory>
 </hibernate-configuration>
Index: src/uz/sportloto/paynet/dao/SecurityDAO.java
===================================================================
--- src/uz/sportloto/paynet/dao/SecurityDAO.java	Mon Apr 21 14:18:56 MSD 2008
+++ src/uz/sportloto/paynet/dao/SecurityDAO.java	Mon Apr 21 14:18:56 MSD 2008
@@ -0,0 +1,13 @@
+package uz.sportloto.paynet.dao;
+
+import uz.sportloto.paynet.model.PaynetCredentials;
+import net.sf.hibernate.HibernateException;
+
+/**
+ * This dao provides methods to work with security stored in database
+ */
+public interface SecurityDAO {
+
+    PaynetCredentials getPaynetCredentialsByTerminalId(int terminalId) throws HibernateException;
+
+}
